package com.retrofit.network.request;import com.retrofit.network.callback.ResultCallback;import com.retrofit.network.func.RetryExceptionFunc;import com.retrofit.network.subscriber.DownloadSubscriber;import com.retrofit.network.transformer.HandleErrorTransformer;import io.reactivex.Observable;import io.reactivex.ObservableSource;import io.reactivex.ObservableTransformer;import io.reactivex.disposables.Disposable;import io.reactivex.schedulers.Schedulers;import okhttp3.ResponseBody;@SuppressWarnings(value = {"unchecked", "deprecation"})public class DownloadRequest_2 extends BaseRequest<DownloadRequest_2> {    private String saveName;    private String savePath;    public DownloadRequest_2(String url) {        super(url);    }    /**     * 下载文件名称<br>     * 默认名字是时间戳生成的<br>     */    public DownloadRequest_2 saveName(String saveName) {        this.saveName = saveName;        return this;    }    /**     * 下载文件保存的路径<br/>     * 默认在：/storage/emulated/0/Android/data/包名/files/1494647767055<br>     */    public DownloadRequest_2 savePath(String savePath) {        this.savePath = savePath;        return this;    }    @Override    protected Observable<ResponseBody> generateRequest() {        return mApiManager.downloadFile(mUrl);    }    public <T> Disposable execute(Object tag, ResultCallback<T> callBack) {        return build().generateRequest().compose(new ObservableTransformer<ResponseBody, ResponseBody>() {            @Override            public ObservableSource<ResponseBody> apply(Observable<ResponseBody> upstream) {                if (isSyncRequest) {                    return upstream.subscribeOn(Schedulers.io())                            .unsubscribeOn(Schedulers.io())                            .observeOn(Schedulers.computation());                } else {                    return upstream;                }            }        }).compose(new HandleErrorTransformer<>())                .retryWhen(new RetryExceptionFunc(mRetryCount, mRetryDelay, mRetryIncreaseDelay))                .subscribeWith(new DownloadSubscriber(tag, mContext, savePath, saveName, callBack));    }}